/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";

export class PerformSearchRequestBody extends SpeakeasyBase {
    /**
     * Uses Lucene Query Syntax in the format of propertyName:value, propertyName:[num1 TO num2] and date range format: propertyName:[yyyyMMdd TO yyyyMMdd]. In the response please see the 'docs' element which has the list of record objects. Each record structure would consist of all the fields and their corresponding values.
     */
    @SpeakeasyMetadata({ data: "form, name=criteria" })
    criteria?: string;

    /**
     * Specify number of rows to be returned. If you run the search with default values, in the response you will see 'numFound' attribute which will tell the number of records available in the dataset.
     */
    @SpeakeasyMetadata({ data: "form, name=rows" })
    rows?: number;

    /**
     * Starting record number. Default value is 0.
     */
    @SpeakeasyMetadata({ data: "form, name=start" })
    start?: number;
}

export class PerformSearchRequest extends SpeakeasyBase {
    @SpeakeasyMetadata({ data: "request, media_type=application/x-www-form-urlencoded" })
    requestBody?: PerformSearchRequestBody;

    /**
     * Name of the dataset. In this case, the default value is oa_citations
     */
    @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=dataset" })
    dataset: string;

    /**
     * Version of the dataset.
     */
    @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=version" })
    version: string;
}

export class ResponseBody extends SpeakeasyBase {}

export class PerformSearchResponse extends SpeakeasyBase {
    /**
     * HTTP response content type for this operation
     */
    @SpeakeasyMetadata()
    contentType: string;

    /**
     * HTTP response status code for this operation
     */
    @SpeakeasyMetadata()
    statusCode: number;

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    @SpeakeasyMetadata()
    rawResponse?: AxiosResponse;

    /**
     * successful operation
     */
    @SpeakeasyMetadata({ elemType: ResponseBody, elemDepth: 2 })
    maps?: Record<string, ResponseBody>[];
}
